// Generated by CoffeeScript 1.7.0
(function() {
  var createCanvas, crop, overallSize, overlay, packRGBA, recolor, repeat, scale, unpackRGBA;

  createCanvas = function(w, h) {
    var canvas, context;
    canvas = document.createElement('canvas');
    canvas.setAttribute('width', w);
    canvas.setAttribute('height', h);
    context = canvas.getContext('2d');
    return [canvas, context];
  };

  repeat = function(sourceImage, timesX, timesY) {
    var canvas, context, destH, destW, pattern, _ref;
    destW = sourceImage.width * timesX;
    destH = sourceImage.height * timesY;
    _ref = createCanvas(destW, destH), canvas = _ref[0], context = _ref[1];
    pattern = context.createPattern(sourceImage, 'repeat');
    context.fillStyle = pattern;
    context.fillRect(0, 0, destW, destH);
    return canvas.toDataURL();
  };

  scale = function(sourceImage, scaleX, scaleY, algorithm) {
    var canvas, context, destH, destW, _ref;
    destW = sourceImage.width * scaleX;
    destH = sourceImage.width * scaleY;
    _ref = createCanvas(destW, destH), canvas = _ref[0], context = _ref[1];
    if (algorithm === 'nearest-neighbor') {
      context.imageSmoothingEnabled = false;
      context.webkitImageSmoothingEnabled = false;
      context.mozImageSmoothingEnabled = false;
    }
    context.drawImage(sourceImage, 0, 0, destW, destH);
    return canvas.toDataURL();
  };

  crop = function(sourceImage, ox, oy, ow, oh) {
    var canvas, context, destH, destW, sh, sw, sx, sy, _ref;
    sx = ox || 0;
    sy = oy || 0;
    destW = sourceImage.width - (ow || 0) - sx;
    destH = sourceImage.height - (oh || 0) - sy;
    sw = destW;
    sh = destH;
    _ref = createCanvas(destW, destH), canvas = _ref[0], context = _ref[1];
    console.log(sx, sy, sw, sh, 0, 0, destW, destH);
    context.drawImage(sourceImage, sx, sy, sw, sh, 0, 0, destW, destH);
    return canvas.toDataURL();
  };

  overallSize = function(sourceImages) {
    var destH, destW, sourceImage, _i, _len;
    destW = destH = 0;
    for (_i = 0, _len = sourceImages.length; _i < _len; _i++) {
      sourceImage = sourceImages[_i];
      if (sourceImage.width > destW) {
        destW = sourceImage.width;
      }
      if (sourceImage.height > destH) {
        destH = sourceImage.height;
      }
    }
    return [destW, destH];
  };

  overlay = function(sourceImages, operation, alpha) {
    var canvas, context, destH, destW, sourceImage, _i, _len, _ref, _ref1;
    _ref = overallSize(sourceImages), destW = _ref[0], destH = _ref[1];
    _ref1 = createCanvas(destW, destH), canvas = _ref1[0], context = _ref1[1];
    context.globalAlpha = alpha != null ? alpha : 1.0;
    context.globalCompositeOperation = operation != null ? operation : 'source-over';
    for (_i = 0, _len = sourceImages.length; _i < _len; _i++) {
      sourceImage = sourceImages[_i];
      context.drawImage(sourceImage, 0, 0);
    }
    return canvas.toDataURL();
  };

  packRGBA = function(r, g, b, a) {
    return r * 0x01000000 + (g << 16) + (b << 8) + a;
  };

  unpackRGBA = function(n) {
    var a, b, g, r;
    r = n >>> 24;
    g = n >>> 16 & 0xff;
    b = n >>> 8 & 0xff;
    a = n & 0xff;
    return [r, g, b, a];
  };

  recolor = function(sourceImage, fromColor, toColor) {
    var a, b, canvas, context, data, g, i, imagedata, r, rgba, _i, _ref, _ref1, _ref2;
    _ref = createCanvas(sourceImage.width, sourceImage.height), canvas = _ref[0], context = _ref[1];
    context.drawImage(sourceImage, 0, 0);
    imagedata = context.getImageData(0, 0, sourceImage.width, sourceImage.height);
    data = imagedata.data;
    for (i = _i = 0, _ref1 = data.length; _i < _ref1; i = _i += 4) {
      r = data[i];
      g = data[i + 1];
      b = data[i + 2];
      a = data[i + 3];
      rgba = packRGBA(r, g, b, a);
      if (rgba === fromColor) {
        _ref2 = unpackRGBA(toColor), r = _ref2[0], g = _ref2[1], b = _ref2[2], a = _ref2[3];
        data[i] = r;
        data[i + 1] = g;
        data[i + 2] = b;
        data[i + 3] = a;
      }
    }
    context.putImageData(imagedata, 0, 0);
    return canvas.toDataURL();
  };

  module.exports = {
    repeat: repeat,
    scale: scale,
    crop: crop,
    overlay: overlay,
    recolor: recolor
  };

}).call(this);
